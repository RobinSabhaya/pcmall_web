echo "ðŸš€ Running pre-commit hooks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[PRE-COMMIT]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if we're in a merge/rebase
if [ -f .git/MERGE_HEAD ] || [ -f .git/rebase-apply ] || [ -f .git/rebase-merge ]; then
    print_warning "Merge/rebase detected, skipping pre-commit hooks"
    exit 0
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|ts|tsx|json)$' | tr '\n' ' ')

if [ -z "$STAGED_FILES" ]; then
    print_warning "No relevant staged files found, skipping checks"
    exit 0
fi

print_status "Found staged files: $STAGED_FILES"

# Check for sensitive data patterns
# print_status "Checking for sensitive data patterns..."
# if git diff --cached | grep -E "(password|secret|key|token|api_key)" --ignore-case; then
#     print_error "Potential sensitive data detected in staged files!"
#     print_error "Please review the flagged lines and remove any secrets."
#     print_error "Consider using environment variables or a secrets management system."
#     exit 1
# fi

# Check for debug statements
print_status "Checking for debug statements..."
if git diff --cached | grep -E "(console\.log|debugger|TODO|FIXME)" --ignore-case; then
    print_warning "Debug statements or TODOs found in staged files."
    print_warning "Consider cleaning these up before committing."
fi

# Check for large files
print_status "Checking for large files..."
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        size=$(wc -c < "$file")
        if [ $size -gt 1048576 ]; then  # 1MB
            print_error "Large file detected: $file ($size bytes)"
            print_error "Consider if this file should be committed or added to .gitignore"
            exit 1
        fi
    fi
done

# Run lint-staged
print_status "Running lint-staged..."
npx lint-staged

# Check if lint-staged succeeded
if [ $? -ne 0 ]; then
    print_error "lint-staged failed"
    exit 1
fi

# Additional TypeScript type checking for staged TS files
STAGED_TS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$' | tr '\n' ' ')
if [ ! -z "$STAGED_TS_FILES" ]; then
    print_status "Running TypeScript checks on staged files..."
    npx tsc --noEmit
    if [ $? -ne 0 ]; then
        print_error "TypeScript type checking failed"
        exit 1
    fi
fi

# Check package.json changes for security vulnerabilities
if git diff --cached --name-only | grep -q "package\.json"; then
    print_status "Package.json changed, running security audit..."
    npm audit --audit-level=moderate
    if [ $? -ne 0 ]; then
        print_error "Security vulnerabilities detected in dependencies"
        print_error "Please fix the vulnerabilities before committing"
        exit 1
    fi
fi

# Check if tests pass for affected files
# print_status "Running tests for affected files..."
# npm run test:run
# if [ $? -ne 0 ]; then
#     print_error "Tests failed for staged files"
#     exit 1
# fi

# Generate/update documentation if source files changed
# STAGED_SRC_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "src/" | grep -E '\.(js|ts)$')
# if [ ! -z "$STAGED_SRC_FILES" ]; then
#     print_status "Source files changed, updating documentation..."
#     npm run docs:generate > /dev/null 2>&1
#     git add docs/
# fi

print_success "All pre-commit checks passed! âœ¨"
print_status "Ready to commit changes."
