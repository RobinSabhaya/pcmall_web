echo "ðŸ”„ Running pre-push hooks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[PRE-PUSH]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Get the current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
print_status "Current branch: $CURRENT_BRANCH"

# Read stdin to get remote and local refs
remote=$1
url=$2

while read local_ref local_sha remote_ref remote_sha; do
    if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
        # Handle delete
        print_warning "Branch deletion detected, skipping validation"
        exit 0
    fi

    if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
        # New branch
        range="$local_sha"
    else
        # Update to existing branch, examine new commits
        range="$remote_sha..$local_sha"
    fi

    # Check for WIP commits
    # print_status "Checking for WIP commits..."
    # WIP_COMMITS=$(git log --oneline $range | grep -i "wip\|work in progress\|fixup\|squash")
    # if [ ! -z "$WIP_COMMITS" ]; then
    #     print_error "WIP commits detected:"
    #     echo "$WIP_COMMITS"
    #     print_error "Please clean up WIP commits before pushing"
    #     exit 1
    # fi

    # Check for merge commits (if we want to prevent them)
    print_status "Checking for merge commits..."
    MERGE_COMMITS=$(git log --oneline --merges $range)
    if [ ! -z "$MERGE_COMMITS" ] && [ "$CURRENT_BRANCH" = "main" ]; then
        print_warning "Merge commits detected on main branch:"
        echo "$MERGE_COMMITS"
        print_warning "Consider using rebase workflow for cleaner history"
    fi
done

# Prevent direct pushes to main/master branch
# PROTECTED_BRANCHES="main master"
# for branch in $PROTECTED_BRANCHES; do
#     if [ "$CURRENT_BRANCH" = "$branch" ]; then
#         print_error "Direct push to $branch branch is not allowed!"
#         print_error "Please create a feature branch and submit a pull request"
#         print_error "To override (not recommended): git push --no-verify"
#         exit 1
#     fi
# done

# Full validation suite
print_status "Running comprehensive validation suite..."

# TypeScript compilation check
print_status "Checking TypeScript compilation..."
npm run type-check
if [ $? -ne 0 ]; then
    print_error "TypeScript compilation failed"
    exit 1
fi

# Linting check
print_status "Running linting checks..."
npm run lint:check
if [ $? -ne 0 ]; then
    print_error "Linting checks failed"
    print_error "Run 'npm run lint' to fix automatic issues"
    exit 1
fi

# Prettier check
print_status "Checking code formatting..."
npm run prettier:check
if [ $? -ne 0 ]; then
    print_error "Code formatting check failed"
    print_error "Run 'npm run prettier' to fix formatting issues"
    exit 1
fi

# Prettier fix
print_status "Fix code formatting..."
npm run prettier
if [ $? -ne 0 ]; then
    print_error "Fix code formatting check failed"
    exit 1
fi

# Security audit
print_status "Running security audit..."
npm run audit:security
if [ $? -ne 0 ]; then
    print_error "Security vulnerabilities found"
    print_error "Please fix security issues before pushing"
    exit 1
fi

# License check
# print_status "Checking licenses..."
# npm run audit:licenses > /dev/null 2>&1
# if [ $? -ne 0 ]; then
#     print_warning "License check completed with warnings"
# fi

# Test suite
# print_status "Running test suite..."
# npm run test:coverage
# if [ $? -ne 0 ]; then
#     print_error "Test suite failed"
#     exit 1
# fi

# Integration tests (if they exist)
# if [ -f "vitest.config.js" ]; then
#     print_status "Running integration tests..."
#     npm run test:run
#     if [ $? -ne 0 ]; then
#         print_error "Integration tests failed"
#         exit 1
#     fi
# fi

# Build check
print_status "Testing production build..."
npm run build
if [ $? -ne 0 ]; then
    print_error "Production build failed"
    exit 1
fi

# Docker build check (if Dockerfile exists)
if [ -f "Dockerfile" ]; then
    print_status "Testing Docker build..."
    docker build -t fastify-app-test . > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        print_error "Docker build failed"
        exit 1
    fi
    # Cleanup test image
    docker rmi fastify-app-test > /dev/null 2>&1
fi

# Performance benchmark (if available)
if [ -f "benchmark/index.js" ]; then
    print_status "Running performance benchmarks..."
    timeout 30s npm run benchmark > /dev/null 2>&1
    if [ $? -eq 124 ]; then
        print_warning "Benchmark timed out (>30s)"
    fi
fi

# Check bundle size (if webpack-bundle-analyzer is configured)
if command -v webpack-bundle-analyzer >/dev/null 2>&1; then
    print_status "Analyzing bundle size..."
    # This would typically generate a report
    print_status "Bundle analysis completed"
fi

# Environment-specific checks
if [ "$CURRENT_BRANCH" = "develop" ] || [ "$CURRENT_BRANCH" = "staging" ]; then
    print_status "Running environment-specific validations for $CURRENT_BRANCH..."

    # Check environment variables
    if [ ! -f ".env.example" ]; then
        print_warning "No .env.example file found"
    fi

    # Database migration check (if applicable)
    if [ -d "migrations" ]; then
        print_status "Checking database migrations..."
        # This would typically run migration dry-run
    fi
fi

# Check commit message format for recent commits
print_status "Validating recent commit messages..."
RECENT_COMMITS=$(git log --oneline -5 --format="%s")
echo "$RECENT_COMMITS" | while read commit_msg; do
    if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+"; then
        print_warning "Commit message format: '$commit_msg'"
        print_warning "Consider using conventional commits format"
    fi
done

print_success "All pre-push validations passed! ðŸš€"
print_status "Safe to push to remote repository"
